import OpenAI from 'openai';

// Verificar configuraci√≥n al cargar el m√≥dulo
console.log('üîç Verificando configuraci√≥n de OpenAI...');
console.log('API Key presente:', !!import.meta.env.VITE_OPENAI_API_KEY);
console.log('API Key (primeros 10 chars):', import.meta.env.VITE_OPENAI_API_KEY?.substring(0, 10));

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true
});

export async function transcribeAudio(audioBlob: Blob): Promise<string> {
  try {
    console.log('üé§ Iniciando transcripci√≥n de audio...');
    console.log('Tama√±o del blob:', audioBlob.size, 'bytes');
    console.log('Tipo de blob:', audioBlob.type);

    if (!import.meta.env.VITE_OPENAI_API_KEY) {
      throw new Error('API Key de OpenAI no configurada');
    }

    if (audioBlob.size === 0) {
      throw new Error('El archivo de audio est√° vac√≠o');
    }

    const file = new File([audioBlob], 'audio.webm', { type: 'audio/webm' });
    console.log('üìÅ Archivo creado:', file.name, file.size, 'bytes');
    
    console.log('üåê Enviando a OpenAI Whisper...');
    const transcription = await openai.audio.transcriptions.create({
      file: file,
      model: 'whisper-1',
      language: 'es'
    });

    console.log('‚úÖ Transcripci√≥n completada:', transcription.text);
    return transcription.text;
  } catch (error) {
    console.error('‚ùå Error transcribing audio:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error('Error de API Key de OpenAI. Verifica tu configuraci√≥n.');
      } else if (error.message.includes('quota')) {
        throw new Error('Has excedido tu cuota de OpenAI. Verifica tu cuenta.');
      } else if (error.message.includes('network')) {
        throw new Error('Error de conexi√≥n. Verifica tu internet.');
      }
    }
    
    throw new Error(`Error al transcribir el audio: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

export async function classifyContent(transcription: string): Promise<any> {
  try {
    console.log('ü§ñ Iniciando clasificaci√≥n con GPT...');
    console.log('Texto a clasificar:', transcription.substring(0, 100) + '...');

    if (!transcription || transcription.trim().length === 0) {
      throw new Error('No hay texto para clasificar');
    }

    const prompt = `
Eres un asistente especializado en analizar notas de voz de profesores sobre estudiantes. 

INSTRUCCIONES CR√çTICAS:
1. Analiza la transcripci√≥n e identifica TODOS los estudiantes mencionados
2. Para cada estudiante, extrae informaci√≥n espec√≠fica sobre √©l/ella
3. Responde √öNICAMENTE en formato JSON v√°lido, sin texto adicional
4. Si no se mencionan estudiantes espec√≠ficos, crea una entrada gen√©rica

FORMATO DE RESPUESTA REQUERIDO:
{
  "students": [
    {
      "name": "Nombre del estudiante o 'Estudiante no identificado'",
      "category": "Comportamiento|Rendimiento|Participaci√≥n|Asistencia|Social|Otro",
      "sentiment": "Positivo|Neutral|Negativo",
      "summary": "Resumen espec√≠fico de este estudiante",
      "suggestedActions": "Acciones espec√≠ficas para este estudiante"
    }
  ],
  "generalSummary": "Resumen general si aplica",
  "generalActions": "Acciones generales si aplica"
}

EJEMPLOS:

Transcripci√≥n: "Mar√≠a Garc√≠a interrumpi√≥ la clase pero Carlos L√≥pez ayud√≥ a sus compa√±eros"
Respuesta:
{
  "students": [
    {
      "name": "Mar√≠a Garc√≠a",
      "category": "Comportamiento",
      "sentiment": "Negativo",
      "summary": "Interrumpi√≥ la clase durante la sesi√≥n",
      "suggestedActions": "Hablar con ella sobre el respeto en clase"
    },
    {
      "name": "Carlos L√≥pez",
      "category": "Social",
      "sentiment": "Positivo",
      "summary": "Ayud√≥ a sus compa√±eros de clase",
      "suggestedActions": "Reconocer su actitud colaborativa"
    }
  ],
  "generalSummary": "Comportamientos contrastantes en la clase",
  "generalActions": "Reforzar normas de convivencia"
}

Transcripci√≥n: "Pedro y Luis trabajaron excelente en el proyecto de ciencias"
Respuesta:
{
  "students": [
    {
      "name": "Pedro",
      "category": "Rendimiento",
      "sentiment": "Positivo",
      "summary": "Excelente trabajo en proyecto de ciencias",
      "suggestedActions": "Continuar motivando su participaci√≥n"
    },
    {
      "name": "Luis",
      "category": "Rendimiento",
      "sentiment": "Positivo",
      "summary": "Excelente trabajo en proyecto de ciencias",
      "suggestedActions": "Continuar motivando su participaci√≥n"
    }
  ],
  "generalSummary": "Trabajo colaborativo exitoso en ciencias",
  "generalActions": "Replicar metodolog√≠a en otros proyectos"
}

AHORA ANALIZA ESTA TRANSCRIPCI√ìN:
"${transcription}"

RESPONDE SOLO CON EL JSON:`;

    console.log('üåê Enviando a OpenAI GPT...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 1000
    });

    const content = completion.choices[0].message.content;
    if (!content) throw new Error('No response from OpenAI');

    console.log('üìù Respuesta cruda de GPT:', content);
    
    // Limpiar la respuesta para asegurar que sea JSON v√°lido
    let cleanContent = content.trim();
    
    // Remover cualquier texto antes o despu√©s del JSON
    const jsonStart = cleanContent.indexOf('{');
    const jsonEnd = cleanContent.lastIndexOf('}') + 1;
    
    if (jsonStart !== -1 && jsonEnd !== -1) {
      cleanContent = cleanContent.substring(jsonStart, jsonEnd);
    }
    
    console.log('üìù JSON limpio:', cleanContent);
    
    let parsed;
    try {
      parsed = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('‚ùå Error parsing JSON:', parseError);
      console.log('Contenido que fall√≥:', cleanContent);
      
      // Fallback: crear estructura b√°sica
      parsed = {
        students: [{
          name: "Estudiante no identificado",
          category: "Otro",
          sentiment: "Neutral",
          summary: transcription.substring(0, 100) + "...",
          suggestedActions: "Revisar nota para m√°s detalles"
        }],
        generalSummary: "Error procesando clasificaci√≥n",
        generalActions: "Revisar transcripci√≥n manualmente"
      };
    }
    
    // Validar estructura
    if (!parsed.students || !Array.isArray(parsed.students)) {
      console.warn('‚ö†Ô∏è Estructura inv√°lida, creando fallback');
      parsed = {
        students: [{
          name: "Estudiante no identificado",
          category: "Otro",
          sentiment: "Neutral",
          summary: transcription.substring(0, 100) + "...",
          suggestedActions: "Revisar nota para m√°s detalles"
        }],
        generalSummary: parsed.generalSummary || "",
        generalActions: parsed.generalActions || ""
      };
    }
    
    // Validar cada estudiante
    parsed.students = parsed.students.map((student: any, index: number) => ({
      name: student.name || `Estudiante ${index + 1}`,
      category: student.category || "Otro",
      sentiment: student.sentiment || "Neutral",
      summary: student.summary || "Sin informaci√≥n espec√≠fica",
      suggestedActions: student.suggestedActions || "Sin acciones espec√≠ficas"
    }));
    
    console.log('‚úÖ Clasificaci√≥n completada y validada:', parsed);
    return parsed;
    
  } catch (error) {
    console.error('‚ùå Error classifying content:', error);
    
    // Fallback completo en caso de error
    const fallback = {
      students: [{
        name: "Error en clasificaci√≥n",
        category: "Otro",
        sentiment: "Neutral",
        summary: transcription.substring(0, 100) + "...",
        suggestedActions: "Revisar manualmente"
      }],
      generalSummary: "Error en el procesamiento",
      generalActions: "Intentar nuevamente"
    };
    
    console.log('üîÑ Usando fallback:', fallback);
    return fallback;
  }
}

export async function classifyGeneralContent(transcription: string): Promise<any> {
  try {
    console.log('ü§ñ Iniciando clasificaci√≥n de nota general con GPT...');
    console.log('Texto a clasificar:', transcription.substring(0, 100) + '...');

    if (!transcription || transcription.trim().length === 0) {
      throw new Error('No hay texto para clasificar');
    }

    const prompt = `
Eres un asistente especializado en analizar notas de voz de profesores sobre su trabajo en el aula y tareas pendientes.

INSTRUCCIONES CR√çTICAS:
1. Analiza la transcripci√≥n e identifica el tema principal, prioridad y acciones pendientes
2. Responde √öNICAMENTE en formato JSON v√°lido, sin texto adicional
3. Clasifica de manera amplia y pr√°ctica, no te limites solo a temas educativos

FORMATO DE RESPUESTA REQUERIDO:
{
  "topic": "Trabajo|Educaci√≥n|Personal|Administrativo|Reuniones|Proyectos|Recordatorios|Ideas|Tareas|Otro",
  "priority": "Alta|Media|Baja",
  "summary": "Resumen conciso de la nota",
  "pendingActions": "Lista de acciones espec√≠ficas a realizar"
}

CRITERIOS DE CLASIFICACI√ìN:

TEMA/√ÅREA:
- "Trabajo": Tareas laborales, proyectos profesionales, responsabilidades del trabajo
- "Educaci√≥n": Clases, estudiantes, evaluaciones, material did√°ctico, planificaci√≥n educativa
- "Personal": Reflexiones personales, desarrollo profesional, bienestar, salud
- "Administrativo": Documentos, tr√°mites, reportes, papeleo, gestiones burocr√°ticas
- "Reuniones": Citas, encuentros, conferencias, llamadas programadas
- "Proyectos": Iniciativas espec√≠ficas, planes a largo plazo, colaboraciones
- "Recordatorios": Cosas que no se deben olvidar, fechas importantes, compromisos
- "Ideas": Pensamientos creativos, propuestas, inspiraci√≥n, lluvia de ideas
- "Tareas": Actividades espec√≠ficas por hacer, pendientes concretos
- "Otro": Cualquier tema que no encaje en las categor√≠as anteriores

PRIORIDAD:
- "Alta": Urgente, requiere atenci√≥n inmediata (deadlines cercanos, problemas cr√≠ticos)
- "Media": Importante pero no urgente (planificaci√≥n a mediano plazo)
- "Baja": Puede esperar, ideas para el futuro

EJEMPLOS:

Transcripci√≥n: "Tengo que comprar leche, llamar al dentista y no olvidar la reuni√≥n del viernes"
Respuesta:
{
  "topic": "Recordatorios",
  "priority": "Media",
  "summary": "Lista de tareas personales y cita m√©dica pendiente",
  "pendingActions": "1. Comprar leche, 2. Llamar al dentista para cita, 3. Confirmar asistencia a reuni√≥n del viernes"
}

Transcripci√≥n: "Se me ocurri√≥ una idea genial para el proyecto de la empresa, podr√≠amos usar inteligencia artificial"
Respuesta:
{
  "topic": "Ideas",
  "priority": "Baja",
  "summary": "Propuesta de integrar IA en proyecto empresarial",
  "pendingActions": "1. Investigar herramientas de IA disponibles, 2. Preparar propuesta detallada, 3. Programar reuni√≥n con equipo"
}

Transcripci√≥n: "Necesito terminar el informe para ma√±ana y preparar la presentaci√≥n para el cliente"
Respuesta:
{
  "topic": "Trabajo",
  "priority": "Alta",
  "summary": "Finalizar informe urgente y preparar presentaci√≥n para cliente",
  "pendingActions": "1. Completar informe antes de ma√±ana, 2. Crear presentaci√≥n para cliente, 3. Revisar materiales de apoyo"
}

AHORA ANALIZA ESTA TRANSCRIPCI√ìN:
"${transcription}"

RESPONDE SOLO CON EL JSON:`;

    console.log('üåê Enviando a OpenAI GPT para clasificaci√≥n general...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 800
    });

    const content = completion.choices[0].message.content;
    if (!content) throw new Error('No response from OpenAI');

    console.log('üìù Respuesta cruda de GPT (general):', content);
    
    // Limpiar la respuesta para asegurar que sea JSON v√°lido
    let cleanContent = content.trim();
    
    // Remover cualquier texto antes o despu√©s del JSON
    const jsonStart = cleanContent.indexOf('{');
    const jsonEnd = cleanContent.lastIndexOf('}') + 1;
    
    if (jsonStart !== -1 && jsonEnd !== -1) {
      cleanContent = cleanContent.substring(jsonStart, jsonEnd);
    }
    
    console.log('üìù JSON limpio (general):', cleanContent);
    
    let parsed;
    try {
      parsed = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('‚ùå Error parsing JSON (general):', parseError);
      console.log('Contenido que fall√≥:', cleanContent);
      
      // Fallback: crear estructura b√°sica para notas generales
      parsed = {
        topic: "Otro",
        priority: "Media",
        summary: transcription.substring(0, 100) + "...",
        pendingActions: "Revisar nota para m√°s detalles"
      };
    }
    
    // Validar y normalizar estructura
    const validTopics = ["Trabajo", "Educaci√≥n", "Personal", "Administrativo", "Reuniones", "Proyectos", "Recordatorios", "Ideas", "Tareas", "Otro"];
    const validPriorities = ["Alta", "Media", "Baja"];
    
    parsed = {
      topic: validTopics.includes(parsed.topic) ? parsed.topic : "Otro",
      priority: validPriorities.includes(parsed.priority) ? parsed.priority : "Media",
      summary: parsed.summary || transcription.substring(0, 100) + "...",
      pendingActions: parsed.pendingActions || "Sin acciones espec√≠ficas"
    };
    
    console.log('‚úÖ Clasificaci√≥n general completada y validada:', parsed);
    return parsed;
    
  } catch (error) {
    console.error('‚ùå Error classifying general content:', error);
    
    // Fallback completo en caso de error
    const fallback = {
      topic: "Otro",
      priority: "Media",
      summary: transcription.substring(0, 100) + "...",
      pendingActions: "Revisar manualmente"
    };
    
    console.log('üîÑ Usando fallback (general):', fallback);
    return fallback;
  }
}

export async function classifyLeadsContent(transcription: string): Promise<any> {
  try {
    console.log('üéØ Iniciando extracci√≥n de datos de leads con GPT...');
    console.log('Texto a procesar:', transcription.substring(0, 100) + '...');

    if (!transcription || transcription.trim().length === 0) {
      throw new Error('No hay texto para procesar');
    }

    const prompt = `
Eres un especialista en extraer informaci√≥n de contacto de posibles estudiantes (leads) desde notas de voz dictadas por profesores.

INSTRUCCIONES CR√çTICAS:
1. Analiza la transcripci√≥n y extrae TODOS los datos de contacto mencionados
2. Identifica m√∫ltiples personas si se mencionan varias en la misma nota
3. Responde √öNICAMENTE en formato JSON v√°lido, sin texto adicional
4. Si un dato no se menciona, usa null para ese campo
5. Infiere el estado del lead basado en el contexto de la conversaci√≥n

ESTRUCTURA DE DATOS REQUERIDA:
{
  "leads": [
    {
      "nombre": "string o null",
      "apellidos": "string o null",
      "telefono": "string o null (formato limpio, solo n√∫meros y guiones)",
      "email": "string o null",
      "dni": "string o null (formato: 12345678A)",
      "fechaNacimiento": "string o null (formato: DD/MM/YYYY)",
      "edad": "number o null",
      "estado": "Nuevo|Contactado|Interesado|No interesado|Dudoso",
      "notas": "string con informaci√≥n adicional relevante"
    }
  ]
}

CRITERIOS DE EXTRACCI√ìN:

NOMBRES:
- Extrae nombre y apellidos por separado
- Si solo se menciona un nombre completo, divide en nombre/apellidos
- Capitaliza correctamente (Primera Letra May√∫scula)

TEL√âFONOS:
- Acepta formatos: 123456789, 123-456-789, +34 123 456 789, etc.
- Normaliza a formato: 123456789 (9 d√≠gitos sin espacios ni guiones)
- Si tiene prefijo internacional, mant√©nlo pero sin espacios

EMAILS:
- Extrae direcciones completas: usuario@dominio.com
- Verifica que contengan @ y dominio v√°lido

DNI:
- Formato espa√±ol: 8 n√∫meros + 1 letra
- Normaliza sin espacios: 12345678A

FECHAS DE NACIMIENTO:
- Convierte a formato DD/MM/YYYY
- Acepta formatos: "15 de mayo de 1990", "15/05/1990", "mayo 15, 1990"

EDAD:
- Si se menciona expl√≠citamente en la transcripci√≥n, √∫sala
- Si hay fecha de nacimiento, calcula la edad actual correctamente (a√±o actual - a√±o nacimiento)
- Si no hay fecha ni edad mencionada, devuelve null
- Redondea a n√∫mero entero

ESTADO DEL LEAD:
- "Nuevo": Primer contacto, reci√©n conocido
- "Contactado": Ya se habl√≥ con ellos anteriormente
- "Interesado": Muestran inter√©s en cursos/servicios
- "No interesado": Rechazaron o no est√°n interesados
- "Dudoso": Indecisos, necesitan m√°s informaci√≥n

EJEMPLOS:

Transcripci√≥n: "Mar√≠a Gonz√°lez L√≥pez, tel√©fono 654-321-987, email maria.gonzalez@gmail.com, DNI 12345678A, naci√≥ el 15 de mayo de 1990, est√° muy interesada en el curso de ingl√©s para adultos"
Respuesta:
{
  "leads": [
    {
      "nombre": "Mar√≠a",
      "apellidos": "Gonz√°lez L√≥pez",
      "telefono": "654321987",
      "email": "maria.gonzalez@gmail.com",
      "dni": "12345678A",
      "fechaNacimiento": "15/05/1990",
      "edad": 35,
      "estado": "Interesado",
      "notas": "Interesada en curso de ingl√©s para adultos"
    }
  ]
}

Transcripci√≥n: "Llam√≥ Ana Mart√≠n, su n√∫mero es seis cinco cuatro tres dos uno nueve ocho siete, dice que lo pensar√° y me llamar√° la pr√≥xima semana"
Respuesta:
{
  "leads": [
    {
      "nombre": "Ana",
      "apellidos": "Mart√≠n",
      "telefono": "654321987",
      "email": null,
      "dni": null,
      "fechaNacimiento": null,
      "edad": null,
      "estado": "Dudoso",
      "notas": "Dice que lo pensar√° y llamar√° la pr√≥xima semana"
    }
  ]
}

Transcripci√≥n: "Pedro Ruiz, pedroruiz85@hotmail.com, 28 a√±os, no le interesa por ahora. Su hermana Carmen Ruiz s√≠ est√° interesada, su tel√©fono es 987-654-321"
Respuesta:
{
  "leads": [
    {
      "nombre": "Pedro",
      "apellidos": "Ruiz",
      "telefono": null,
      "email": "pedroruiz85@hotmail.com",
      "dni": null,
      "fechaNacimiento": null,
      "edad": 28,
      "estado": "No interesado",
      "notas": "No le interesa por ahora"
    },
    {
      "nombre": "Carmen",
      "apellidos": "Ruiz",
      "telefono": "987654321",
      "email": null,
      "dni": null,
      "fechaNacimiento": null,
      "edad": null,
      "estado": "Interesado",
      "notas": "Hermana de Pedro Ruiz, s√≠ est√° interesada"
    }
  ]
}

AHORA EXTRAE LOS DATOS DE ESTA TRANSCRIPCI√ìN:
"${transcription}"

RECORDATORIO CR√çTICO: Si hay fecha de nacimiento, calcula la edad correctamente usando el a√±o actual (2025). Si se menciona edad expl√≠citamente, usa esa. Si no hay ni fecha ni edad, deja como null.

RESPONDE SOLO CON EL JSON:`;

    console.log('üåê Enviando a OpenAI GPT para extracci√≥n de leads...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 1200
    });

    const content = completion.choices[0].message.content;
    if (!content) throw new Error('No response from OpenAI');

    console.log('üìù Respuesta cruda de GPT (leads):', content);
    
    // Limpiar la respuesta para asegurar que sea JSON v√°lido
    let cleanContent = content.trim();
    
    // Remover cualquier texto antes o despu√©s del JSON
    const jsonStart = cleanContent.indexOf('{');
    const jsonEnd = cleanContent.lastIndexOf('}') + 1;
    
    if (jsonStart !== -1 && jsonEnd !== -1) {
      cleanContent = cleanContent.substring(jsonStart, jsonEnd);
    }
    
    console.log('üìù JSON limpio (leads):', cleanContent);
    
    let parsed;
    try {
      parsed = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('‚ùå Error parsing JSON (leads):', parseError);
      console.log('Contenido que fall√≥:', cleanContent);
      
      // Fallback: crear estructura b√°sica para leads
      parsed = {
        leads: [{
          nombre: null,
          apellidos: null,
          telefono: null,
          email: null,
          dni: null,
          fechaNacimiento: null,
          edad: null,
          estado: "Nuevo",
          notas: transcription.substring(0, 200) + (transcription.length > 200 ? "..." : "")
        }]
      };
    }
    
    // Validar y normalizar estructura
    if (!parsed.leads || !Array.isArray(parsed.leads) || parsed.leads.length === 0) {
      console.warn('‚ö†Ô∏è Estructura inv√°lida, creando fallback para leads');
      parsed = {
        leads: [{
          nombre: null,
          apellidos: null,
          telefono: null,
          email: null,
          dni: null,
          fechaNacimiento: null,
          edad: null,
          estado: "Nuevo",
          notas: transcription.substring(0, 200) + (transcription.length > 200 ? "..." : "")
        }]
      };
    }
    
    // Validar y normalizar cada lead
    const validStates = ["Nuevo", "Contactado", "Interesado", "No interesado", "Dudoso"];
    
    parsed.leads = parsed.leads.map((lead: any, index: number) => {
      // Normalizar tel√©fono
      let cleanPhone = lead.telefono;
      if (cleanPhone && typeof cleanPhone === 'string') {
        // Limpiar tel√©fono removiendo espacios, guiones y manteniendo solo n√∫meros y +
        cleanPhone = cleanPhone.replace(/\s+/g, '').replace(/[^\d+]/g, '');
        // Validar formato espa√±ol (9 d√≠gitos) o internacional (+34...)
        if (cleanPhone.match(/^\d{9}$/)) {
          // Mantener formato sin guiones: 123456789
          cleanPhone = cleanPhone;
        } else if (cleanPhone.match(/^\+\d+$/)) {
          // Mantener prefijo internacional sin espacios
          cleanPhone = cleanPhone;
        }
      }
      
      // Normalizar DNI
      let cleanDNI = lead.dni;
      if (cleanDNI && typeof cleanDNI === 'string') {
        cleanDNI = cleanDNI.replace(/\s+/g, '').toUpperCase();
        // Validar formato b√°sico espa√±ol
        if (!cleanDNI.match(/^\d{8}[A-Z]$/)) {
          cleanDNI = null; // Si no es v√°lido, mejor null
        }
      }
      
      
      // Normalizar edad
      let cleanAge = lead.edad;
      if (cleanAge !== null && cleanAge !== undefined) {
        cleanAge = parseInt(cleanAge);
        if (isNaN(cleanAge) || cleanAge < 0 || cleanAge > 120) {
          cleanAge = null;
        }
      }
      
      return {
        nombre: lead.nombre || null,
        apellidos: lead.apellidos || null,
        telefono: cleanPhone || null,
        email: lead.email || null,
        dni: cleanDNI || null,
        fechaNacimiento: lead.fechaNacimiento || null,
        edad: cleanAge,
        estado: validStates.includes(lead.estado) ? lead.estado : "Nuevo",
        notas: lead.notas || `Lead ${index + 1} extra√≠do de transcripci√≥n`
      };
    });
    
    console.log('‚úÖ Extracci√≥n de leads completada y validada:', parsed);
    return parsed;
    
  } catch (error) {
    console.error('‚ùå Error extracting leads data:', error);
    
    // Fallback completo en caso de error
    const fallback = {
      leads: [{
        nombre: null,
        apellidos: null,
        telefono: null,
        email: null,
        dni: null,
        fechaNacimiento: null,
        edad: null,
        estado: "Nuevo",
        notas: `Error procesando transcripci√≥n: ${transcription.substring(0, 100)}...`
      }]
    };
    
    console.log('üîÑ Usando fallback (leads):', fallback);
    return fallback;
  }
}